<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一、Zookeeper简介、三种搭建模式和配置文件详解]]></title>
    <url>%2F2019%2F03%2F25%2Fone-zookeeper-deploy%2F</url>
    <content type="text"><![CDATA[1. 简介Zookeeper缘起于非开源的Google的Chubby，雅虎模仿Chubby开发了ZooKeeper，实现了类似的分布式锁管理，并捐给了Apache，作为是Hadoop和Hbase的重要组件。ZooKeeper是一种用于分布式应用程序的分布式开源协调服务，它主要是用来解决分布式应用中经常遇到的一些数据一致性问题。它的一致性、可靠性和容错性保证了其能够在大型分布式系统中稳定的表现，并不会因为某一个节点服务宕机而导致整个集群崩溃。它可提供的功能包括：配置维护、域名服务、分布式同步、组服务等。Zookeeper集群中的角色主要有： Leader：为zk集群的核心，负责集群内部的调度、投票的发起和决策和系统状态更新登。 Follower：接收Client请求、转发请求给Leader和参与投票等。 Observer：充当观察者角色，功能与Follower基本一致，不同点在于它不参与任何形式的投票，它只提供非事务请求服务。 Zookeeper维护一个具有层次关系的数据结构，类似于文件系统，名称是由斜杠（/）分隔的路径元素序列，ZooKeeper名称空间中的每个节点都由路径标识。 2. 安装配置zookeeper的相关资源如下： 官网：http://zookeeper.apache.org/ 下载：https://archive.apache.org/dist/zookeeper/ zookeeper的安装之前，需确保java环境运行正常。zookeeper有三种搭建方式：单机模式、伪集群模式和集群模式。 2.1. 单机模式解压：将下载好的zookeeper-*.tar.gz解压到指定安装目录下：12tar -zxvf zookeeper-3.4.10.tar.gz #解压zookeeper压缩包cd zookeeper-3.4.10 #进入zookeeper根目录 主要目录结构： bin：一些执行脚本命令，其中，.sh为linux环境下脚本，.cmd为windows下脚本。 conf：存放配置文件和日志配置文件。 contrib：一些附加功能，用于操作zk的工具包。 dist-maven：mvn编译后目录。 docs：相关操作文档。 lib：zk依赖的jar包。 recipes：一些代码示例demo。 src：源文件。 配置文件：将conf目录下zoo_sample.cfg复制一份并重命名为zoo.cfg：1cp conf/zoo_sample.cfg conf/zoo.cfg 修改配置文件zoo.cfg：123456tickTime=2000initLimit=10syncLimit=5dataDir=/usr/local/zookeeper/zookeeper-3.4.10/dataDir #zk数据保存目录dataLogDir=/usr/local/zookeeper/zookeeper-3.4.10/dataLogDir #zk日志保存目录，当不配置时与dataDir一致clientPort=2181 #客户端访问zk的端口 配置文件中参数详解见“3.配置文件详解”。 配置环境变量：为方便操作，可对zk配置环境变量，linux环境下在/etc/profile文件最后追加：123ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.4.10PATH=$PATH:$ZOOKEEPER_HOME/binexport ZOOKEEPER_HOME PATH 为立即生效配置，通过执行如下命令：1source /etc/profile 启动zk服务：1zkServer.sh start 启动信息：123ZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfgStarting zookeeper ... STARTED 查看zk状态：1zkServer.sh status 输出状态信息：123ZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfgMode: standalone #说明当前为单机模式 关闭zk服务：1zkServer.sh stop 关闭信息：123ZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfgStopping zookeeper ... STOPPED 2.2. 伪集群模式zookeeper还可以在单机上运行多个zk实例，实现单机伪集群的搭建，即单机环境下模拟zk集群的运行。现在在单机上搭建一个3个节点的伪分布式环境，需要配置3个配置文件（zoo1.cfg、zoo2.cfg、zoo3.cfg，分别代表3个节点的配置信息）。在配置过程中，必须保证各个配置文件中的端口号（clientPort）不能冲突，zk数据及日志保存目录（dataDir、dataLogDir）也不能一样。除此之外，还需要在每个节点对应的dataDir中创建一个名为myid的文件，并写入一个数字以标识当前的zk实例。在一台单机上部署3个节点的伪集群模式的zookeeper环境，假设3台zk服务分别为server1、server2和server3，对应3个配置文件分别为zoo1.cfg、zoo2.cfg和zoo3.cfg，这些重点的配置文件信息描述如下：conf/zoo1.cfg：1234567891011tickTime=2000initLimit=10syncLimit=5dataDir=/usr/local/zookeeper/zookeeper-3.4.10/cluster-data/dataDir1dataLogDir=/usr/local/zookeeper/zookeeper-3.4.10/cluster-data/dataLogDir1clientPort=2181#server.id=host:port1:port2,其中id为server id,对应myid;host为ip或主机名称;port1为用于followers连接到leader的端口; port2为leader选举时使用的端口.server.1=127.0.0.1:2287:3387server.2=127.0.0.1:2288:3388server.3=127.0.0.1:2289:3389 创建myid文件，并写入server id：1echo "1" &gt; cluster-data/dataDir1/myid conf/zoo2.cfg：1234567891011tickTime=2000initLimit=10syncLimit=5dataDir=/usr/local/zookeeper/zookeeper-3.4.10/cluster-data/dataDir2dataLogDir=/usr/local/zookeeper/zookeeper-3.4.10/cluster-data/dataLogDir2clientPort=2182#server.id=host:port1:port2,其中id为server id,对应myid;host为ip或主机名称;port1为用于followers连接到leader的端口; port2为leader选举时使用的端口.server.1=127.0.0.1:2287:3387server.2=127.0.0.1:2288:3388server.3=127.0.0.1:2289:3389 创建myid文件，并写入server id：1echo "2" &gt; cluster-data/dataDir2/myid conf/zoo3.cfg：1234567891011tickTime=2000initLimit=10syncLimit=5dataDir=/usr/local/zookeeper/zookeeper-3.4.10/cluster-data/dataDir3dataLogDir=/usr/local/zookeeper/zookeeper-3.4.10/cluster-data/dataLogDir3clientPort=2183#server.id=host:port1:port2,其中id为server id,对应myid;host为ip或主机名称;port1为用于followers连接到leader的端口; port2为leader选举时使用的端口.server.1=127.0.0.1:2287:3387server.2=127.0.0.1:2288:3388server.3=127.0.0.1:2289:3389 创建myid文件，并写入server id：1echo "3" &gt; cluster-data/dataDir3/myid 启动zk服务：1234567891011121314151617zkServer.sh start conf/zoo1.cfg#运行server1实例，输出信息如下：ZooKeeper JMX enabled by defaultUsing config: conf/zoo1.cfgStarting zookeeper ... STARTEDzkServer.sh start conf/zoo2.cfg#运行server2实例，输出信息如下：ZooKeeper JMX enabled by defaultUsing config: conf/zoo2.cfgStarting zookeeper ... STARTEDzkServer.sh start conf/zoo3.cfg#运行server3实例，输出信息如下：ZooKeeper JMX enabled by defaultUsing config: conf/zoo3.cfgStarting zookeeper ... STARTED 启动后，可通过jps命令，查看zk运行情况：123418866 QuorumPeerMain18967 Jps18936 QuorumPeerMain18894 QuorumPeerMain 其中，QuorumPeerMain为zk集群的启动入口类，用来加载配置启动QuorumPeer线程。 查看zk个节点状态：1234567891011121314151617zkServer.sh status conf/zoo1.cfg#查看server1状态，输出信息如下：ZooKeeper JMX enabled by defaultUsing config: conf/zoo1.cfgMode: followerzkServer.sh status conf/zoo2.cfg#查看server2状态，输出信息如下：ZooKeeper JMX enabled by defaultUsing config: conf/zoo2.cfgMode: leaderzkServer.sh status conf/zoo3.cfg#查看server3状态，输出信息如下：ZooKeeper JMX enabled by defaultUsing config: conf/zoo3.cfgMode: follower 从返回的状态信息可知，server2为leader、server1和server3为follower。 2.3. 集群模式在真实环境中，为提供可靠的zookeeper分布式环境，通常一台机器上只部署一个zk服务。在zk集群中，若超过半数以上的服务节点可用，则整个zk集群服务是可用的，故而其节点数通常为大于等于3的奇数（2n+1）。现在分别在3台机器上搭建zk分部署环境，3台机器情况如下：zk服务标识 | ip | myid———— | ————- | ————server1 | 192.168.56.100 | 1server2 | 192.168.56.101 | 2server3 | 192.168.56.102 | 3 集群配置方式与上面两种方式类似，为方便操作可在每台机器上配置zookeeper的环境变量，每台机器上的配置文件也都相同。conf/zoo.cfg：1234567891011tickTime=2000initLimit=10syncLimit=5dataDir=/usr/local/zookeeper/zookeeper-3.4.10/dataDirdataLogDir=/usr/local/zookeeper/zookeeper-3.4.10/dataLogDirclientPort=2182#server.id=host:port1:port2,其中id为server id,对应myid;host为ip或主机名称;port1为用于followers连接到leader的端口; port2为leader选举时使用的端口.server.1=192.168.56.100:2288:3388server.2=192.168.56.101:2288:3388server.3=192.168.56.102:2288:3388 在每台机器上的/usr/local/zookeeper/zookeeper-3.4.10/dataDir中创建myid文件，并写入server id：server1为1、server2为2、server3为3。 在每台机器上分别启动zk服务：1zkServer.sh start 3. 配置文件详解3.1. conf/zoo_sample.cfg：zoo_sample.cfg为zookeeper的核心配置文件，需要将其修改为zoo.cfg。其中各个参数的解释如下： Minimum Configuration（必要配置参数） 参数名 说明 tickTime 默认为2000。zk中基本时间单位长度（ms），zk中的时间都以该时间为基础，是该时间的倍数，如最小的session过期时间就是tickTime的两倍。服务器与服务器或客户端与服务器之间维持心跳的时间间隔，即每个tickTime会发送一个心跳，通过该心跳可以监视机器的工作状态、控制follower和leader的通信时间等。 dataDir 默认为/tmp/zookeeper。该默认目录仅为样例，不建议直接使用。存储快照文件snapshot的目录，即保存数据的目录，默认情况下，zk会将写数据的日志文件也存储在该目录。zk的数据在内存中以树形结构进行存储，而快照为每隔一段时间就会把整个DataTree的数据序列化后存储在磁盘中。 clientPort 默认为2181。客户端连接zk服务器的端口，zk会监听这个端口，接受客户端的访问请求。 Advanced Configuration（可选的高级配置项，更细化的控制） 参数名 说明 dataLogDir 参考资料[1] Zookeeper Overview. http://zookeeper.apache.org/doc/r3.4.10/zookeeperOver.html.[2] ZooKeeper Administrator’s Guide. http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_configuration.[3] zookeeper调优(遇到就添加）. https://my.oschina.net/u/3049601/blog/1809785.[4] zookeeper日志各类日志简介. https://www.cnblogs.com/jxwch/p/6526271.html.[5] ZooKeeper: 简介, 配置及运维指南. https://www.cnblogs.com/neooelric/p/9230967.html.[6] ZooKeeper学习第二期–ZooKeeper安装配置. https://www.cnblogs.com/sunddenly/p/4018459.html]]></content>
      <categories>
        <category>zookeeper系列</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello, my little seven!]]></title>
    <url>%2F2018%2F12%2F31%2Fpost-title%2F</url>
    <content type="text"><![CDATA[===标题：=== 一级标题二级标题三级标题四级标题五级标题六级标题 ===强调：使用 和 _ 来表示斜体和加粗=== Coding，让开发更简单*Coding，让开发更简单Coding，让开发更简单Coding，让开发更简单 ===自动链接：方括号显示说明，圆括号内显示网址===超强大的云开发平台Coding ===锚点：=== ===引用：=== Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。 这是第一级引用。 这是第二级引用。 现在回到第一级引用。 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(echo $input | $markdown_script); ===列表：=== 无字列表 无字列表 无字列表 无字列表 无字列表 无字列表 有序列表1 有序列表2 有序列表3 如果要在列表项目内放进引用，那『&gt;』就需要缩进： Coding.net有以下主要功能: 代码托管平台在线运行环境代码质量监控项目管理平台 待办列表: 表示列表是否勾选状态（注意：[ ] 前后都要有空格） 不勾选 勾选 ===代码：===123require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html ===表格：===First Header | Second Header | Third Header———— | ————- | ————Content Cell | Content Cell | Content CellContent Cell | Content Cell | Content Cell First Header Second Header Third Header Left Center Right Left Center Right ===分割线：使用 3 个以上『-』=== ===图片：===内联图片语法：or 引用图片语法：![Alt text][id][id]: url/to/image “Optional title attribute” ===流程图：===12345678graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;E; E--&gt;F; D--&gt;F; F--&gt;G; ===时序图：===123456789101112sequenceDiagram participant Alice participant Bob Alice-&gt;John: Hello John, how are you? loop Healthcheck John-&gt;John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--&gt;Alice: Great! John-&gt;Bob: How about you? Bob--&gt;John: Jolly good! ===甘特图：=== 123456789101112131415gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d]]></content>
      <categories>
        <category>只是测试</category>
        <category>测试1</category>
        <category>测试1-1</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
